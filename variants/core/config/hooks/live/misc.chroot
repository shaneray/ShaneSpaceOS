#!/bin/sh

set -e

# enable gtk debugging
gsettings set org.gtk.Settings.Debug enable-inspector-keybinding true

# Install xfce4-panel 4.14
mkdir -p /tmp2
cd /tmp2
wget http://mxrepo.com/mx/repo/pool/main/m/mx19-archive-keyring/mx19-archive-keyring_2019.5.31_all.deb
sudo apt install ./mx19-archive-keyring_2019.5.31_all.deb
echo "deb http://mxrepo.com/mx/repo/ buster main non-free" > /etc/apt/sources.list.d/mxrepo.list
sudo apt update
sudo apt install xfce4-panel -y
rm /etc/apt/sources.list.d/mxrepo.list


SS_LIB="/lib/shanespace"
interactive_shell_integration()
{
	# System-wide bash.bashrc file for interactive bash(1) shells.
	local bashrc_file="/etc/bash.bashrc"
	echo "Updating System-wide ${bashrc_file} file for interactive bash(1) shells."
	# Create symlink
	sslink "${SS_LIB}/ssbash" "/etc/bash.bashrc.d/ssbash.sh"
	
	if grep -q "/etc/bash.bashrc.d" "${bashrc_file}"
	then
		echo "System-wide bashrc file [${bashrc_file}] for interactive bash(1) shells already updated!"
	else
		local bashrc_file_bak="${bashrc_file}.bak"
		[ -f "${bashrc_file_bak}" ] &&
		{
			echo "Bashrc backup file [${bashrc_file_bak}] found, restoring to original state."
			mv "${bashrc_file_bak}" "${bashrc_file}"
		}
	
		# create backup of current bashrc file
		echo "Creating backup of [${bashrc_file}] to [${bashrc_file_bak}]"
		cp "${bashrc_file}" "${bashrc_file_bak}"
		
		# add logic to load files from bashrdc.d
		cat >> "${bashrc_file}" <<- "EOF"
		
		# load extra files from bash.bashrc.d
		if [ -d /etc/bash.bashrc.d ]; then
			for i in /etc/bash.bashrc.d/*.sh; do
				if [ -r $i ]; then
					. $i
				fi
			done
			unset i
		fi
		EOF
	fi
}

copy()
{
	local src=$1
	local destination=$2
	
	mkdir -p "$(dirname "$destination")"
	echo "Copying file(s) from [$src] to [$destination]"
	rsync -rah --info=progress2 "$src" "$destination"
}

sslink()
{
	local src
	src="$(realpath -s "$1")"
	local destination="$2"
	local output=""
	
	mkdir -p "$(dirname "$destination")"
	echo "Creating symlink from [$src] to [$destination]"
	ln -sfT "$src" "$destination"
}

noninteractive_shell_integration()
{
	# System-wide bash.bashrc file for interactive bash(1) shells.
	local environment_file="/etc/environment"
	echo "Updating System-wide ${environment_file} file and adding \$BASH_ENV variable for non-interactive bash(1) shells..."
	if grep -q "${SS_LIB}/ssbash" "$environment_file"
	then
		echo "System-wide [${environment_file}] file already contains appropriate [\$BASH_ENV] variable for non-interactive bash(1) shells!"
	else
		# check for backup file and restore if it exists.
		local environment_file_bak="${environment_file}.bak"
		[ -f "${environment_file_bak}" ] &&
		{
			echo "Environment backup file [${environment_file_bak}] found, restoring to original state."
			mv "${environment_file_bak}" "${environment_file}"
		}
		
		# create backup of current environment file
		echo "Creating backup of [${environment_file}] to [${environment_file_bak}]"
		cp "${environment_file}" "${environment_file_bak}"
		
		# add ssbash to environment file
		cat >> "${environment_file}" <<- EOF
			export BASH_ENV="${SS_LIB}/ss-bash"
		EOF
	fi
}

interactive_shell_integration
noninteractive_shell_integration

wget https://download.teamviewer.com/download/linux/teamviewer-host_amd64.deb
sudo apt install -y ./teamviewer-host_amd64.deb

cd /lib
sudo mkdir OctoPrint && cd OctoPrint
echo "creating virtual environment.."
sudo python3 -m venv venv
echo "directory listing for $PWD"
ls
echo "directory listing for ${PWD}/venv/bin"
ls ${PWD}/venv/bin
source venv/bin/activate
pip install pip --upgrade
pip install --no-cache-dir octoprint
sudo usermod -a -G tty user
sudo usermod -a -G dialout user

sudo mv /lib/OctoPrint/octoprint.service /etc/systemd/system/octoprint.service
systemctl enable octoprint.service

rm -rf /tmp2