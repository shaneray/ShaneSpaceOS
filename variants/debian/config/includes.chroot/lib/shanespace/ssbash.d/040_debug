#!/bin/bash

########################################
# functions
########################################

trap_error()
{
	local exit_code="$1"
	local line_number="$2"
	local last_command="$3"
	local last_command_source="$4"
	local output
	
	if [ "$exit_code" != "0" ]
	then
		if [ -z "$last_command_source" ]
		then
			local command_source="Interactive"
		else
			local command_source="$(basename "$last_command_source") ($line_number)" || "unknown"
		fi
		
		write_error "$command_source [$last_command] exited with code [$exit_code]"
		
		local output
		local stack_skip=0
		array_contains "trap_debug" "${FUNCNAME[*]}" && stack_skip=$((stack_skip+1))
		array_contains "write_caller_info" "${FUNCNAME[*]}" && stack_skip=$((stack_skip+1))
	
		output+="BASH_ARGV: ${BASH_ARGV[@]:$((${stack_skip}*2))}\n"
		output+="FUNCNAME: $(array_join ' -> '$(array_reverse "${FUNCNAME[@]:${stack_skip}}"))\n" 
		output+="STACKTRACE:\n"
		local i=-1 size=${#BASH_SOURCE[@]}
		for ((; i < size-1; i++));
		do  ## -1 to exclude main()
			((frame=${#BASH_SOURCE[@]}-i ))
			output+=("\"[$frame] ${BASH_SOURCE[$i]:-}:${BASH_LINENO[$i]} ${FUNCNAME[$i+1]}()\"")
		done
		
		write_error_detail "$output"
	fi
	
	return 0
}

trap_debug()
{
	[ "$2" -eq 1 ] && return
	[ $DEBUG_NO_TRAP = 1 ] && return
	
	local exit_code="$1"
	local line_number="$2"
	last_command="$3"
	local last_command_source="$4"
	local last_command_type
	last_command_type="$(get_debug_type "$last_command")"
	
	if [ -z "$last_command_source" ]
	then
		last_command_source="Interactive"
	else
		last_command_source="$(basename "$last_command_source") ($line_number)" || "unknown"
	fi
	
	write_debug "${last_command_source} [$last_command_type] executing [${last_command}]"
}

trap_exit()
{
	local exit_code="$1"
	local line_number="$2"
	local last_command_source="$3"
	local output
	
	if [ "$exit_code" -ne 0 ]
	then
		writec "Program [${last_command_source}] exited with code [$exit_code]" red >&2
	else
		writec "Program [${last_command_source}] exited with code [$exit_code]" green
	fi
	
	script_exit
}

debug_enable()
{
	DEBUG=1
	set_options
	build_debug_traps
}

trace_enable()
{
	TRACE=1
	debug_enable
}

debug_disable()
{
	DEBUG=0
	trap '' DEBUG
	trap '' EXIT
}

trace_disable()
{
	TRACE=0
	debug_disable
}

build_debug_traps()
{
	trap 'trap_debug $? $LINENO "$BASH_COMMAND" "${BASH_SOURCE:-''}"' DEBUG
	trap 'trap_exit $? $LINENO "${BASH_SOURCE:-''}"' EXIT
}

get_debug_type()
{
	local full_command="$1"
	local command_name="$(string_split "$full_command")"
	local output="$(type -t "$command_name" || echo "command")"
	
	[ "$command_name" == "trap" ] && output="trap"
	[[ $command_name =~ ^(local|declare)\  ]] && output="variable assignment"
	
	[[ $full_command =~ ^\[\[*\ .+\ \]*\]$ ]] && output="if statement"
	[[ $full_command =~ ^[a-zA-Z_][a-zA-Z_0-9]+\+*= ]] && output="variable assignment"
	
	echo "$output"
}
